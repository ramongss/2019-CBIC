}
dataset <- read_excel("Dados petrÃ³leo e GN.xlsx")
names(dataset) <- c("Month","Oil","Gas")
dataset$Month <- NULL
dataset$Oil <- NULL
## Tratamento dos dados (treino e teste)
lag <- 5
x5 <- dataset[1:(dim(dataset)[1]-lag),1]
x4 <- dataset[(lag-3):(dim(dataset)[1]-lag+1),1]
x3 <- dataset[(lag-2):(dim(dataset)[1]-lag+2),1]
x2 <- dataset[(lag-1):(dim(dataset)[1]-lag+3),1]
x1 <- dataset[(lag):(dim(dataset)[1]-lag+4),1]
y  <- dataset[(lag+1):(dim(dataset)[1]),1]
data <- cbind(y,x1,x2,x3,x4,x5)
names(data) <- c("y","x1","x2","x3","x4","x5")
newdata <- FE(as.data.frame(data$x1))
data <- cbind(data,(newdata[[1]]))
n <- dim(data)[1]
cut <- 0.7 * n
treino <- data[1:cut,]
teste <- tail(data,n-cut)
x_treino <- treino[,-1]
y_treino <- treino[,1]
x_teste <- teste[,-1]
y_teste <- teste[,1]
seed <- 7
control <- trainControl(method = "cv",
number = 5,
savePredictions = 'final')
algorithmList <- c('knn','svmLinear2','rf','xgbLinear','mlp')
set.seed(seed)
models <- caretList(y~., data=treino, trControl=control,
preProcess = c("center","scale"),
methodList = algorithmList,
tuneLength = 5)
pred_knn        <- predict(models$knn, teste)
pred_knn_treino <- predict(models$knn, treino)
pred_svmLinear2        <- predict(models$svmLinear2, teste)
pred_svmLinear2_treino <- predict(models$svmLinear2, treino)
pred_rf         <- predict(models$rf, teste)
pred_rf_treino  <- predict(models$rf, treino)
pred_xgbLinear        <- predict(models$xgbLinear, teste)
pred_xgbLinear_treino <- predict(models$xgbLinear, treino)
pred_mlp         <- predict(models$mlp, teste)
pred_mlp_treino  <- predict(models$mlp, treino)
pred_RMSE <- data.frame(knn = RMSE(pred_knn,y_teste),
svmLinear2 = RMSE(pred_svmLinear2,y_teste),
rf = RMSE(pred_rf,y_teste),
xgbLinear = RMSE(pred_xgbLinear,y_teste),
mlp = RMSE(pred_mlp,y_teste))
pred_MAPE <- data.frame(knn = mape(pred_knn,y_teste),
svmLinear2 = mape(pred_svmLinear2,y_teste),
rf = mape(pred_rf,y_teste),
xgbLinear = mape(pred_xgbLinear,y_teste),
mlp = mape(pred_mlp,y_teste))
pred_Rsquared <- data.frame(knn = cor(pred_knn,y_teste)^2,
svmLinear2 = cor(pred_svmLinear2,y_teste)^2,
rf = cor(pred_rf,y_teste)^2,
xgbLinear = cor(pred_xgbLinear,y_teste)^2,
mlp = cor(pred_mlp,y_teste)^2)
pred_RMSE
pred_MAPE
pred_Rsquared
PO<-function(Obs,Pred,Title)
{
data<-data.frame(as.vector(unlist(data.frame(Obs,Pred))),
rep(c("y(t) - Estimated","y(t) - Predicted"),each=dim(Obs)[1]),
rep(seq(1,dim(Obs)[1]),times=2))
colnames(data)<-c("Predictions","Legend","Frequency")
g2<- ggplot(data, aes(Frequency, Predictions, colour=Legend))+ylab("Value")+xlab("Month")+ggtitle(Title)
g2<- g2 + geom_line(size=0.75)+theme_bw(base_size = 18)
g2<- g2 + geom_text(x=dim(Obs)[1]*0.1, y=max(Obs),label="Training set",show.legend = FALSE, color = "#000000")
g2<- g2 + geom_text(x=dim(Obs)[1]*0.8, y=max(Obs),label="Test set",show.legend = FALSE, color = "#000000")
g2<- g2 + geom_vline(xintercept = dim(Obs)[1]*0.7, size = 0.8)
g2<- g2 + scale_color_manual(values=c("#999999","#000000"),labels = expression(italic(y(t)),italic(hat(y)(t))))
g2<- g2 + theme(legend.position = "bottom", legend.direction = "horizontal",plot.title = element_text(hjust = 0.5))
print(g2)
}
{x11()
PO(Obs,Pred1,"Gas Production")
}
Obs <- data.frame(y)
Pred1 <- data.frame(c(pred_svmLinear2_treino,pred_svmLinear2))
Pred2 <- data.frame(c(pred_knn_treino,pred_knn))
Pred3 <- data.frame(c(pred_rf_treino,pred_rf))
Pred4 <- data.frame(c(pred_xgbLinear_treino,pred_xgbLinear))
Pred5 <- data.frame(c(pred_mlp_treino,pred_mlp))
{x11()
PO(Obs,Pred1,"Gas Production")
}
{x11()
PO(Obs,Pred4,"Gas Production")
}
{x11()
PO(Obs,Pred3,"Gas Production")
}
PO2<-function(Obs,Pred,Model.name)
{
data1<-data.frame(Obs,
Pred,
rep(c("Training","Test"),
times = c(round(0.7*dim(Obs)[1]),round(0.3*dim(Obs)[1]))),
rep(seq(1,dim(Obs)[1])))
colnames(data1)<-c("Observed","Predicted","Type","Frequency")
g2 <- ggplot(data1, aes(x=Observed, y=Predicted))
g2 <- g2 + geom_point(aes(shape=Type, color = Type),size=3)
g2 <- g2 + geom_abline(slope = 1, intercept = 0)
g2 <- g2 + scale_color_manual(values=c("#000000","#FF0000"))
g2 <- g2 + xlab("Observed") + ylab("Predicted") + ggtitle(Model.name)
# g2 <- g2 + facet_wrap(~State,scales="free")
g2 <- g2 + theme_bw(base_size = 18)
g2 <- g2 + theme(legend.position = "bottom",
legend.title = element_blank(),
axis.text=element_text(size=18),
legend.text=element_text(size=rel(1)),
plot.title = element_text(hjust=0.5),
text=element_text(family="Times New Roman"),
axis.title=element_text(size=12))
print(g2)
}
PO2(Obs,Pred4,"xgbLinear")
FE<-function(data)
{
cat("\014")
library(moments)
options(warn=-1)
meanstra <-matrix(nrow=dim(data)[1],ncol=dim(data)[2])
sdtra    <-matrix(nrow=dim(data)[1],ncol=dim(data)[2])
skewtra  <-matrix(nrow=dim(data)[1],ncol=dim(data)[2])
diftra   <-matrix(nrow=dim(data)[1],ncol=dim(data)[2])
expo2    <-matrix(nrow=dim(data)[1],ncol=dim(data)[2])
expo3    <-matrix(nrow=dim(data)[1],ncol=dim(data)[2])
ftanh    <-matrix(nrow=dim(data)[1],ncol=dim(data)[2])
flog     <-matrix(nrow=dim(data)[1],ncol=dim(data)[2])
min      <-matrix(nrow=dim(data)[1],ncol=dim(data)[2])
max      <-matrix(nrow=dim(data)[1],ncol=dim(data)[2])
type<-is.data.frame(data)
if (type == FALSE)
{
cat('Data set must be a data.frame')
}
else
{
cat('Feature Engineering process start! \n')
for(j in 1:dim(data)[2])    #Columns
{
for (i in 1:dim(data)[1]) #Lines
{
meanstra[i,j]<-ifelse(i==1,mean(c(data[1,j],data[1,j],data[1,j])),
ifelse(i==2,mean(c(data[1,j],data[1,j],data[2,j])),
mean(c(data[i,j],data[(i-1),j],data[(i-2),j]))))
sdtra[i,j]<-ifelse(i==1,sd(c(data[1,j],data[1,j],data[1,j])),
ifelse(i==2,sd(c(data[1,j],data[1,j],data[2,j])),
sd(c(data[i,j],data[(i-1),j],data[(i-2),j]))))
skewtra[i,j]<-ifelse(i==1,skewness(c(data[1,j],data[1,j],data[1,j])),
ifelse(i==2,skewness(c(data[1,j],data[1,j],data[2,j])),
skewness(c(data[i,j],data[(i-1),j],data[(i-2),j]))))
diftra[i,j]<-ifelse(i==1,data[1,j]-data[1,j],data[i,j]-data[i-1,j])
min[i,j]<-ifelse(i==1,min(c(data[1,j],data[1,j],data[1,j])),
ifelse(i==2,min(c(data[1,j],data[1,j],data[2,j])),
min(c(data[i,j],data[(i-1),j],data[(i-2),j]))))
max[i,j]<-ifelse(i==1,max(c(data[1,j],data[1,j],data[1,j])),
ifelse(i==2,max(c(data[1,j],data[1,j],data[2,j])),
max(c(data[i,j],data[(i-1),j],data[(i-2),j]))))
}
expo2[,j]<-(data[,j])^2
expo3[,j]<-(data[,j])^3
ftanh[,j]<-tanh(data[,j])
flog[,j]<-log(data[,j])
skewtra[is.na(skewtra[,j]), j]  <- mean(skewtra[,j], na.rm = TRUE)
cat("Feature build to colum",j,"of", dim(data)[2],"\n")
}
Results <-data.frame(meanstra,sdtra,skewtra,diftra,expo2,expo3,ftanh,flog,min,max)
Results <-Filter(function(x) sd(x) != 0, Results)
cat("Feature Engineering process done!\n")
Features<-list(Results)
# print(Features)
}
}
dataset <- read_excel("Dados petrÃ³leo e GN.xlsx")
names(dataset) <- c("Month","Oil","Gas")
dataset$Month <- NULL
dataset$Oil <- NULL
## Tratamento dos dados (treino e teste)
lag <- 5
x5 <- dataset[1:(dim(dataset)[1]-lag),1]
x4 <- dataset[(lag-3):(dim(dataset)[1]-lag+1),1]
x3 <- dataset[(lag-2):(dim(dataset)[1]-lag+2),1]
x2 <- dataset[(lag-1):(dim(dataset)[1]-lag+3),1]
x1 <- dataset[(lag):(dim(dataset)[1]-lag+4),1]
y  <- dataset[(lag+1):(dim(dataset)[1]),1]
data <- cbind(y,x1,x2,x3,x4,x5)
names(data) <- c("y","x1","x2","x3","x4","x5")
newdata <- FE(as.data.frame(data$x1))
data <- cbind(data,(newdata[[1]]))
n <- dim(data)[1]
cut <- 0.7 * n
treino <- data[1:cut,]
teste <- tail(data,n-cut)
x_treino <- treino[,-1]
y_treino <- treino[,1]
x_teste <- teste[,-1]
y_teste <- teste[,1]
seed <- 7
control <- trainControl(method = "cv",
number = 5,
savePredictions = 'final')
algorithmList <- c('knn','svmLinear2','rf','xgbLinear','mlp')
set.seed(seed)
models <- caretList(y~., data=treino, trControl=control,
preProcess = c("pca","BoxCox"),
methodList = algorithmList,
tuneLength = 5)
# results <- resamples(models)
#
# summary(results)
# scales <- list(x=list(relation="free"), y=list(relation="free"))
#
# dotplot(results, scales=scales)
## PrediÃ§Ã£o
pred_knn        <- predict(models$knn, teste)
pred_knn_treino <- predict(models$knn, treino)
pred_svmLinear2        <- predict(models$svmLinear2, teste)
pred_svmLinear2_treino <- predict(models$svmLinear2, treino)
pred_rf         <- predict(models$rf, teste)
pred_rf_treino  <- predict(models$rf, treino)
pred_xgbLinear        <- predict(models$xgbLinear, teste)
pred_xgbLinear_treino <- predict(models$xgbLinear, treino)
pred_mlp         <- predict(models$mlp, teste)
pred_mlp_treino  <- predict(models$mlp, treino)
pred_RMSE <- data.frame(knn = RMSE(pred_knn,y_teste),
svmLinear2 = RMSE(pred_svmLinear2,y_teste),
rf = RMSE(pred_rf,y_teste),
xgbLinear = RMSE(pred_xgbLinear,y_teste),
mlp = RMSE(pred_mlp,y_teste))
pred_MAPE <- data.frame(knn = mape(pred_knn,y_teste),
svmLinear2 = mape(pred_svmLinear2,y_teste),
rf = mape(pred_rf,y_teste),
xgbLinear = mape(pred_xgbLinear,y_teste),
mlp = mape(pred_mlp,y_teste))
pred_Rsquared <- data.frame(knn = cor(pred_knn,y_teste)^2,
svmLinear2 = cor(pred_svmLinear2,y_teste)^2,
rf = cor(pred_rf,y_teste)^2,
xgbLinear = cor(pred_xgbLinear,y_teste)^2,
mlp = cor(pred_mlp,y_teste)^2)
pred_RMSE
pred_MAPE
pred_Rsquared
PO<-function(Obs,Pred,Title)
{
data<-data.frame(as.vector(unlist(data.frame(Obs,Pred))),
rep(c("y(t) - Estimated","y(t) - Predicted"),each=dim(Obs)[1]),
rep(seq(1,dim(Obs)[1]),times=2))
colnames(data)<-c("Predictions","Legend","Frequency")
g2<- ggplot(data, aes(Frequency, Predictions, colour=Legend))+ylab("Value")+xlab("Month")+ggtitle(Title)
g2<- g2 + geom_line(size=0.75)+theme_bw(base_size = 18)
g2<- g2 + geom_text(x=dim(Obs)[1]*0.1, y=max(Obs),label="Training set",show.legend = FALSE, color = "#000000")
g2<- g2 + geom_text(x=dim(Obs)[1]*0.8, y=max(Obs),label="Test set",show.legend = FALSE, color = "#000000")
g2<- g2 + geom_vline(xintercept = dim(Obs)[1]*0.7, size = 0.8)
g2<- g2 + scale_color_manual(values=c("#999999","#000000"),labels = expression(italic(y(t)),italic(hat(y)(t))))
g2<- g2 + theme(legend.position = "bottom", legend.direction = "horizontal",plot.title = element_text(hjust = 0.5))
print(g2)
}
Obs <- data.frame(y)
Pred1 <- data.frame(c(pred_svmLinear2_treino,pred_svmLinear2))
Pred2 <- data.frame(c(pred_knn_treino,pred_knn))
Pred3 <- data.frame(c(pred_rf_treino,pred_rf))
Pred4 <- data.frame(c(pred_xgbLinear_treino,pred_xgbLinear))
Pred5 <- data.frame(c(pred_mlp_treino,pred_mlp))
{x11()
PO(Obs,Pred1,"Gas Production")
}
{x11()
PO(Obs,Pred3,"Gas Production")
}
dataset <- read_excel("Dados petrÃ³leo e GN.xlsx")
names(dataset) <- c("Month","Oil","Gas")
dataset$Month <- NULL
dataset$Oil <- NULL
lag <- 5
x5 <- dataset[1:(dim(dataset)[1]-lag),1]
x4 <- dataset[(lag-3):(dim(dataset)[1]-lag+1),1]
x3 <- dataset[(lag-2):(dim(dataset)[1]-lag+2),1]
x2 <- dataset[(lag-1):(dim(dataset)[1]-lag+3),1]
x1 <- dataset[(lag):(dim(dataset)[1]-lag+4),1]
y  <- dataset[(lag+1):(dim(dataset)[1]),1]
data <- cbind(y,x1,x2,x3,x4,x5)
names(data) <- c("y","x1","x2","x3","x4","x5")
n <- dim(data)[1]
cut <- 0.7 * n
treino <- data[1:cut,]
teste <- tail(data,n-cut)
x_treino <- treino[,-1]
y_treino <- treino[,1]
x_teste <- teste[,-1]
y_teste <- teste[,1]
## Treino
seed <- 7
control <- trainControl(method = "cv",
number = 5,
savePredictions = 'final')
algorithmList <- c('knn','svmLinear2','rf','xgbLinear','mlp')
set.seed(seed)
models <- caretList(y~., data=treino, trControl=control,
preProcess = c("pca","BoxCox"),
methodList = algorithmList,
tuneLength = 5)
# results <- resamples(models)
#
# summary(results)
# scales <- list(x=list(relation="free"), y=list(relation="free"))
#
# dotplot(results, scales=scales)
## PrediÃ§Ã£o
pred_knn        <- predict(models$knn, teste)
pred_knn_treino <- predict(models$knn, treino)
pred_svmLinear2        <- predict(models$svmLinear2, teste)
pred_svmLinear2_treino <- predict(models$svmLinear2, treino)
pred_rf         <- predict(models$rf, teste)
pred_rf_treino  <- predict(models$rf, treino)
pred_xgbLinear        <- predict(models$xgbLinear, teste)
pred_xgbLinear_treino <- predict(models$xgbLinear, treino)
pred_mlp         <- predict(models$mlp, teste)
pred_mlp_treino  <- predict(models$mlp, treino)
pred_RMSE <- data.frame(knn = RMSE(pred_knn,y_teste),
svmLinear2 = RMSE(pred_svmLinear2,y_teste),
rf = RMSE(pred_rf,y_teste),
xgbLinear = RMSE(pred_xgbLinear,y_teste),
mlp = RMSE(pred_mlp,y_teste))
pred_MAPE <- data.frame(knn = mape(pred_knn,y_teste),
svmLinear2 = mape(pred_svmLinear2,y_teste),
rf = mape(pred_rf,y_teste),
xgbLinear = mape(pred_xgbLinear,y_teste),
mlp = mape(pred_mlp,y_teste))
pred_Rsquared <- data.frame(knn = cor(pred_knn,y_teste)^2,
svmLinear2 = cor(pred_svmLinear2,y_teste)^2,
rf = cor(pred_rf,y_teste)^2,
xgbLinear = cor(pred_xgbLinear,y_teste)^2,
mlp = cor(pred_mlp,y_teste)^2)
pred_RMSE
pred_MAPE
pred_Rsquared
dataset <- read_excel("Dados petrÃ³leo e GN.xlsx")
names(dataset) <- c("Month","Oil","Gas")
dataset$Month <- NULL
dataset$Oil <- NULL
lag <- 5
x5 <- dataset[1:(dim(dataset)[1]-lag),1]
x4 <- dataset[(lag-3):(dim(dataset)[1]-lag+1),1]
x3 <- dataset[(lag-2):(dim(dataset)[1]-lag+2),1]
x2 <- dataset[(lag-1):(dim(dataset)[1]-lag+3),1]
x1 <- dataset[(lag):(dim(dataset)[1]-lag+4),1]
y  <- dataset[(lag+1):(dim(dataset)[1]),1]
data <- cbind(y,x1,x2,x3,x4,x5)
names(data) <- c("y","x1","x2","x3","x4","x5")
n <- dim(data)[1]
cut <- 0.7 * n
treino <- data[1:cut,]
teste <- tail(data,n-cut)
x_treino <- treino[,-1]
y_treino <- treino[,1]
x_teste <- teste[,-1]
y_teste <- teste[,1]
## Treino
seed <- 7
control <- trainControl(method = "cv",
number = 5,
savePredictions = 'final')
algorithmList <- c('knn','svmLinear2','rf','xgbLinear','mlp')
set.seed(seed)
models <- caretList(y~., data=treino, trControl=control,
preProcess = c("center","scale"),
methodList = algorithmList,
tuneLength = 5)
# results <- resamples(models)
#
# summary(results)
# scales <- list(x=list(relation="free"), y=list(relation="free"))
#
# dotplot(results, scales=scales)
## PrediÃ§Ã£o
pred_knn        <- predict(models$knn, teste)
pred_knn_treino <- predict(models$knn, treino)
pred_svmLinear2        <- predict(models$svmLinear2, teste)
pred_svmLinear2_treino <- predict(models$svmLinear2, treino)
pred_rf         <- predict(models$rf, teste)
pred_rf_treino  <- predict(models$rf, treino)
pred_xgbLinear        <- predict(models$xgbLinear, teste)
pred_xgbLinear_treino <- predict(models$xgbLinear, treino)
pred_mlp         <- predict(models$mlp, teste)
pred_mlp_treino  <- predict(models$mlp, treino)
pred_RMSE <- data.frame(knn = RMSE(pred_knn,y_teste),
svmLinear2 = RMSE(pred_svmLinear2,y_teste),
rf = RMSE(pred_rf,y_teste),
xgbLinear = RMSE(pred_xgbLinear,y_teste),
mlp = RMSE(pred_mlp,y_teste))
pred_MAPE <- data.frame(knn = mape(pred_knn,y_teste),
svmLinear2 = mape(pred_svmLinear2,y_teste),
rf = mape(pred_rf,y_teste),
xgbLinear = mape(pred_xgbLinear,y_teste),
mlp = mape(pred_mlp,y_teste))
pred_Rsquared <- data.frame(knn = cor(pred_knn,y_teste)^2,
svmLinear2 = cor(pred_svmLinear2,y_teste)^2,
rf = cor(pred_rf,y_teste)^2,
xgbLinear = cor(pred_xgbLinear,y_teste)^2,
mlp = cor(pred_mlp,y_teste)^2)
pred_RMSE
pred_MAPE
pred_Rsquared
dataset <- read_excel("Dados petrÃ³leo e GN.xlsx")
names(dataset) <- c("Month","Oil","Gas")
dataset$Month <- NULL
dataset$Oil <- NULL
lag <- 5
x5 <- dataset[1:(dim(dataset)[1]-lag),1]
x4 <- dataset[(lag-3):(dim(dataset)[1]-lag+1),1]
x3 <- dataset[(lag-2):(dim(dataset)[1]-lag+2),1]
x2 <- dataset[(lag-1):(dim(dataset)[1]-lag+3),1]
x1 <- dataset[(lag):(dim(dataset)[1]-lag+4),1]
y  <- dataset[(lag+1):(dim(dataset)[1]),1]
data <- cbind(y,x1,x2,x3,x4,x5)
names(data) <- c("y","x1","x2","x3","x4","x5")
n <- dim(data)[1]
cut <- 0.7 * n
treino <- data[1:cut,]
teste <- tail(data,n-cut)
x_treino <- treino[,-1]
y_treino <- treino[,1]
x_teste <- teste[,-1]
y_teste <- teste[,1]
seed <- 7
control <- trainControl(method = "cv",
number = 5,
savePredictions = 'final')
algorithmList <- c('knn','svmLinear2','rf','xgbLinear','mlp')
set.seed(seed)
models <- caretList(y~., data=treino, trControl=control,
preProcess = c("center","scale"),
methodList = algorithmList,
tuneLength = 5)
pred_knn        <- predict(models$knn, teste)
pred_knn_treino <- predict(models$knn, treino)
pred_svmLinear2        <- predict(models$svmLinear2, teste)
pred_svmLinear2_treino <- predict(models$svmLinear2, treino)
pred_rf         <- predict(models$rf, teste)
pred_rf_treino  <- predict(models$rf, treino)
pred_xgbLinear        <- predict(models$xgbLinear, teste)
pred_xgbLinear_treino <- predict(models$xgbLinear, treino)
pred_mlp         <- predict(models$mlp, teste)
pred_mlp_treino  <- predict(models$mlp, treino)
pred_RMSE <- data.frame(knn = RMSE(pred_knn,y_teste),
svmLinear2 = RMSE(pred_svmLinear2,y_teste),
rf = RMSE(pred_rf,y_teste),
xgbLinear = RMSE(pred_xgbLinear,y_teste),
mlp = RMSE(pred_mlp,y_teste))
pred_MAPE <- data.frame(knn = mape(pred_knn,y_teste),
svmLinear2 = mape(pred_svmLinear2,y_teste),
rf = mape(pred_rf,y_teste),
xgbLinear = mape(pred_xgbLinear,y_teste),
mlp = mape(pred_mlp,y_teste))
pred_Rsquared <- data.frame(knn = cor(pred_knn,y_teste)^2,
svmLinear2 = cor(pred_svmLinear2,y_teste)^2,
rf = cor(pred_rf,y_teste)^2,
xgbLinear = cor(pred_xgbLinear,y_teste)^2,
mlp = cor(pred_mlp,y_teste)^2)
pred_RMSE
pred_MAPE
pred_Rsquared
PO<-function(Obs,Pred,Title)
{
data<-data.frame(as.vector(unlist(data.frame(Obs,Pred))),
rep(c("y(t) - Estimated","y(t) - Predicted"),each=dim(Obs)[1]),
rep(seq(1,dim(Obs)[1]),times=2))
colnames(data)<-c("Predictions","Legend","Frequency")
g2<- ggplot(data, aes(Frequency, Predictions, colour=Legend))+ylab("Value")+xlab("Month")+ggtitle(Title)
g2<- g2 + geom_line(size=0.75)+theme_bw(base_size = 18)
g2<- g2 + geom_text(x=dim(Obs)[1]*0.1, y=max(Obs),label="Training set",show.legend = FALSE, color = "#000000")
g2<- g2 + geom_text(x=dim(Obs)[1]*0.8, y=max(Obs),label="Test set",show.legend = FALSE, color = "#000000")
g2<- g2 + geom_vline(xintercept = dim(Obs)[1]*0.7, size = 0.8)
g2<- g2 + scale_color_manual(values=c("#999999","#000000"),labels = expression(italic(y(t)),italic(hat(y)(t))))
g2<- g2 + theme(legend.position = "bottom", legend.direction = "horizontal",plot.title = element_text(hjust = 0.5))
print(g2)
}
{x11()
PO(Obs,Pred4,"Gas Production")
}
Obs <- data.frame(y)
Pred1 <- data.frame(c(pred_svmLinear2_treino,pred_svmLinear2))
Pred2 <- data.frame(c(pred_knn_treino,pred_knn))
Pred3 <- data.frame(c(pred_rf_treino,pred_rf))
Pred4 <- data.frame(c(pred_xgbLinear_treino,pred_xgbLinear))
Pred5 <- data.frame(c(pred_mlp_treino,pred_mlp))
{x11()
PO(Obs,Pred4,"Gas Production")
}
{x11()
PO(Obs,Pred1,"Gas Production")
}
{x11()
PO(Obs,Pred2,"Gas Production")
}
{x11()
PO(Obs,Pred3,"Gas Production")
}
PO(Obs,Pred3,"Gas Production")
{x11()
PO(Obs,Pred5,"Gas Production")
}
PO(Obs,Pred4,"Gas Production")
{x11()
PO(Obs,Pred1,"Gas Production")
}
