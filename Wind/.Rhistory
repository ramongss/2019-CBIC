fuzzy_rule(temperature %is% good && humidity %is% dry &&
precipitation %is% no.rain, weather %is% perfect),
fuzzy_rule(temperature %is% hot && humidity %is% wet &&
precipitation %is% rain, weather %is% bad),
fuzzy_rule(temperature %is% cold, weather %is% bad),
fuzzy_rule(temperature %is% good || humidity %is% good ||
precipitation %is% little.rain, weather %is% ok),
fuzzy_rule(temperature %is% hot && precipitation %is% little.rain,
weather %is% ok),
fuzzy_rule(temperature %is% hot && humidity %is% dry &&
precipitation %is% little.rain, weather %is% ok)
)
model <- fuzzy_system(variables, rules)
print(model)
plot(model)
example.1 <- fuzzy_inference(model, list(temperature = 75, humidity = 0,
precipitation = 70))
plot(example.1)
plot(example.1)
plot(example.1)
gset_defuzzify(example.1, "centroid")
example.2 <- fuzzy_inference(model, list(temperature = 30, humidity = 0,
precipitation = 70))
plot(example.2)
gset_defuzzify(example.2, "largestofmax")
x11()
plot(example.2)
x11()
plot(example.1)
example.1 <- fuzzy_inference(model, list(temperature = 75, humidity = 0,
precipitation = 70))
x11()
plot(example.1)
# Reset universe
sets_options("universe", NULL)
install.packages("FuzzyR")
library(FuzzyR)
help(FuzzyR)
library(FuzzyR)
help(FuzzyR)
?FuzzyR
fis <- newfis('tipper')
fis <- addvar(fis, 'input', 'service', c(0, 10))
fis <- addmf(fis, 'input', 1, 'poor', 'gaussmf', c(1.5, 0))
print(fis)
names(fis)
fis$name
fis$type
?fis
:addvar
?addvar
?addmf
?newfis
fis <- newfis('tipper', fistype="sugeno")
fis <- newfis('tipper', fistype="stk")
install.packages('frbs')
install.packages("Rcpp")
install.packages("devtools")
install.packages("curl")
install.packages("rlang")
install.packages("purrr")
install.packages("rstudioapi")
devtools::install_github("rstudio/reticulate", force=TRUE)
devtools::install_github("r-lib/processx")
library(processx)
devtools::install_github("rstudio/tensorflow")
devtools::install_github("rstudio/keras")
testit <- function(x = sort(runif(20)), ...)
{
pb <- txtProgressBar(...)
for(i in c(0, x, 1)) {Sys.sleep(0.5); setTxtProgressBar(pb, i)}
Sys.sleep(1)
close(pb)
}
testit()
testit(runif(10))
testit(style = 3)
library(keras)
install_keras()
library(keras)
# list of fruits to modle
fruit_list <- c("Kiwi", "Banana", "Apricot", "Avocado", "Cocos", "Clementine", "Mandarine", "Orange",
"Limes", "Lemon", "Peach", "Plum", "Raspberry", "Strawberry", "Pineapple", "Pomegranate")
# number of output classes (i.e. fruits)
output_n <- length(fruit_list)
# image size to scale down to (original images are 100 x 100 px)
img_width <- 20
img_height <- 20
target_size <- c(img_width, img_height)
# RGB = 3 channels
channels <- 3
# path to image folders
train_image_files_path <- "/Users/ramon/Documents/Doc/Work04/fruits-360/Training/"
valid_image_files_path <- "/Users/ramon/Documents/Doc/Work04/fruits-360/Test/"
# optional data augmentation
train_data_gen = image_data_generator(
rescale = 1/255 #,
#rotation_range = 40,
#width_shift_range = 0.2,
#height_shift_range = 0.2,
#shear_range = 0.2,
#zoom_range = 0.2,
#horizontal_flip = TRUE,
#fill_mode = "nearest"
)
# Validation data shouldn't be augmented! But it should also be scaled.
valid_data_gen <- image_data_generator(
rescale = 1/255
)
# training images
train_image_array_gen <- flow_images_from_directory(train_image_files_path,
train_data_gen,
target_size = target_size,
class_mode = "categorical",
classes = fruit_list,
seed = 42)
# validation images
valid_image_array_gen <- flow_images_from_directory(valid_image_files_path,
valid_data_gen,
target_size = target_size,
class_mode = "categorical",
classes = fruit_list,
seed = 42)
cat("Number of images per class:")
table(factor(train_image_array_gen$classes))
View(valid_image_array_gen)
cat("\nClass label vs index mapping:\n")
train_image_array_gen$class_indices
fruits_classes_indices <- train_image_array_gen$class_indices
save(fruits_classes_indices, file = "/Users/ramon/Documents/Doc/Work04/fruits-360/fruits_classes_indices.RData")
View(fruits_classes_indices)
# number of training samples
train_samples <- train_image_array_gen$n
# number of validation samples
valid_samples <- valid_image_array_gen$n
# define batch size and number of epochs
batch_size <- 32
epochs <- 10
# initialise model
model <- keras_model_sequential()
# add layers
model %>%
layer_conv_2d(filter = 32, kernel_size = c(3,3), padding = "same", input_shape = c(img_width, img_height, channels)) %>%
layer_activation("relu") %>%
# Second hidden layer
layer_conv_2d(filter = 16, kernel_size = c(3,3), padding = "same") %>%
layer_activation_leaky_relu(0.5) %>%
layer_batch_normalization() %>%
# Use max pooling
layer_max_pooling_2d(pool_size = c(2,2)) %>%
layer_dropout(0.25) %>%
# Flatten max filtered output into feature vector
# and feed into dense layer
layer_flatten() %>%
layer_dense(100) %>%
layer_activation("relu") %>%
layer_dropout(0.5) %>%
# Outputs from dense layer are projected onto output layer
layer_dense(output_n) %>%
layer_activation("softmax")
# compile
model %>% compile(
loss = "categorical_crossentropy",
optimizer = optimizer_rmsprop(lr = 0.0001, decay = 1e-6),
metrics = "accuracy"
)
# fit
hist <- model %>% fit_generator(
# training data
train_image_array_gen,
# epochs
steps_per_epoch = as.integer(train_samples / batch_size),
epochs = epochs,
# validation data
validation_data = valid_image_array_gen,
validation_steps = as.integer(valid_samples / batch_size),
# print progress
verbose = 2,
callbacks = list(
# save best model after every epoch
callback_model_checkpoint("/Users/ramon/Documents/Doc/Work04/fruits-360/keras/fruits_checkpoints.h5", save_best_only = TRUE),
# only needed for visualising with TensorBoard
callback_tensorboard(log_dir = "/Users/ramon/Documents/Doc/Work04/fruits-360/keras/logs")
)
)
## Set working directory
setwd("~/Doc/Fire/")
# Starting Code -----------------------------------------------------
## Clear memory
rm(list=ls(all=TRUE))
## Set working directory
setwd("~/Doc/Fire/")
## Load data
load("dataset.RData")
View(dataset)
library(ggplot2)
library(dplyr)
library(Metrics)
library(mlbench)
library(caret)
library(caretEnsemble)
library(e1071)
library(readxl)
library(forecast)
View(dataset)
dataset.ts <- ts(dataset, start = c(1998,6), end = c(2019,8), frequency = 12)
View(dataset.ts)
dataset.ts <- ts(dataset$values, start = c(1998,6), end = c(2019,8), frequency = 12)
View(dataset.ts)
head(dataset.ts)
dataset.ts
plot(dataset.ts)
dataset.decomp <- stl(dataset.ts, "per")
dataset.decomp
plot(dataset.decomp)
dataset.decomp$time.series
dataset.decomp$time.series[,1]
IMF1 <- data.frame(dataset.decomp$time.series[,1])
colnames(IMF1) <- "seasonal"
IMF2 <- data.frame(dataset.decomp$time.series[,2])
colnames(IMF2) <- "trend"
IMF3 <- data.frame(dataset.decomp$time.series[,3])
colnames(IMF3) <- "remainder"
head(IMF1)
head(IMF2)
head(IMF3)
dataset.decomp
acf(dataset.ts)
pacf(dataset.ts)
acf(dataset)
acf(dataset[,2])
acf(dataset$values, main = "")
pacf(dataset$values, main = "")
dataset.decomp$time.series$seasonal
dataset.decomp$time.series
plot(dataset.decomp$to)
plot(dataset.decomp$time.series[,1])
plot(IMF1])
plot(IMF1)
IMF1
auto.arima(dataset)
auto.arima(dataset$values)
auto.arima(dataset.ts)
View(dataset.ts)
View(dataset)
dim(dataset.ts)
dim(dataset)
length(dataset.ts)
auto.arima(dataset$values)
auto.arima(dataset.ts)
auto.arima(dataset$values)
auto.arima(dataset.ts)
head(dataset$values, 10)
head(dataset$values, 20)
head(dataset$values, 20)
head(dataset.ts)
head(dataset$values, 20)
head(dataset.ts, 20)
pacf(dataset$values, main = "")
summary(auto.arima(dataset$values))
accuracy(auto.arima(dataset$values))
auto.arima(dataset$values)
IMF1[(lag+1):(dim(IMF1)[1]),1]
lag <- 4
IMF1[(lag+1):(dim(IMF1)[1]),1]
dim(IMF1[(lag+1):(dim(IMF1)[1]),1])
dim(IMF1[(lag+1):(dim(IMF1)[1]),1])[1]
length(IMF1[(lag+1):(dim(IMF1)[1]),1])
length(IMF1[(lag):(dim(IMF1)[1]-lag+4),1])
length(IMF1[(lag-1):(dim(IMF1)[1]-lag+3),1])
dim(IMF1)[1]
length(IMF1[(lag):(dim(IMF1)[1]-lag+4),1])
lag <- 4
length(IMF2[(lag+1):10,1])
length(IMF2[(lag):10-lag+3,1])
length(IMF2[(lag):10-(lag+3),1])
length(IMF2[(lag):(10-lag+3),1])
length(IMF2[(lag):(10-lag+4),1])
length(IMF2[(lag):(10-lag+5),1])
length(IMF2[(lag):(10-lag+3),1])
lag <- 4
length(IMF1[(lag-1):(dim(IMF1)[1]-lag+3),1])
length(IMF1[(lag-1):(10-lag+3),1])
length(IMF1[(lag):(10-lag+3),1])
length(IMF1[(lag):(dim(IMF1)[1]-lag+3),1])
length(IMF1[(lag-1):(dim(IMF1)[1]-lag+2),1])
length(IMF1[(lag-2):(dim(IMF1)[1]-lag+1),1])
lag <- 4
IMF1.x4 <- IMF1[1:(dim(IMF1)[1]-lag),1]
IMF1.x3 <- IMF1[(lag-2):(dim(IMF1)[1]-lag+1),1]
IMF1.x2 <- IMF1[(lag-1):(dim(IMF1)[1]-lag+2),1]
IMF1.x1 <- IMF1[(lag):(dim(IMF1)[1]-lag+3),1]
IMF1.y  <- IMF1[(lag+1):(dim(IMF1)[1]),1]
IMF1.lag <- cbind(IMF1.y,IMF1.x1,IMF1.x2,IMF1.x3,IMF1.x4)
colnames(IMF1.lag) <- c("y","x1","x2","x3","x4")
head(IMF1.lag, 20)
head(IMF1,20)
lag <- 4
IMF1.x4 <- IMF1[(lag-3):(dim(IMF1)[1]-lag),1]
IMF1.x3 <- IMF1[(lag-2):(dim(IMF1)[1]-lag+1),1]
IMF1.x2 <- IMF1[(lag-1):(dim(IMF1)[1]-lag+2),1]
IMF1.x1 <- IMF1[(lag):(dim(IMF1)[1]-lag+3),1]
IMF1.y  <- IMF1[(lag+1):(dim(IMF1)[1]),1]
IMF1.lag <- cbind(IMF1.y,IMF1.x1,IMF1.x2,IMF1.x3,IMF1.x4)
colnames(IMF1.lag) <- c("y","x1","x2","x3","x4")
IMF2.x4 <- IMF2[(lag-3):(dim(IMF2)[1]-lag),1]
IMF2.x3 <- IMF2[(lag-2):(dim(IMF2)[1]-lag+1),1]
IMF2.x2 <- IMF2[(lag-1):(dim(IMF2)[1]-lag+2),1]
IMF2.x1 <- IMF2[(lag):(dim(IMF2)[1]-lag+3),1]
IMF2.y  <- IMF2[(lag+1):(dim(IMF2)[1]),1]
IMF2.lag <- cbind(IMF2.y,IMF2.x1,IMF2.x2,IMF2.x3,IMF2.x4)
colnames(IMF2.lag) <- c("y","x1","x2","x3","x4")
IMF3.x4 <- IMF3[(lag-3):(dim(IMF3)[1]-lag),1]
IMF3.x3 <- IMF3[(lag-2):(dim(IMF3)[1]-lag+1),1]
IMF3.x2 <- IMF3[(lag-1):(dim(IMF3)[1]-lag+2),1]
IMF3.x1 <- IMF3[(lag):(dim(IMF3)[1]-lag+3),1]
IMF3.y  <- IMF3[(lag+1):(dim(IMF3)[1]),1]
IMF3.lag <- cbind(IMF3.y,IMF3.x1,IMF3.x2,IMF3.x3,IMF3.x4)
colnames(IMF3.lag) <- c("y","x1","x2","x3","x4")
dim(IMF1.lag)
dim(IMF2.lag)
dim(IMF3.lag)
head(IMF1.lag,20)
head(IMF2.lag,20)
head(IMF3.lag,20)
head(IMF3.lag,20)
n <- dim(IMF1.lag)[1]
n
cut <- 0.7 * n
cut
# IMF1
IMF1.treino <- IMF1.lag[1:cut,]
IMF1.teste <- tail(IMF1.lag,n-cut)
IMF1.xtreino <- IMF1.treino[,-1]
IMF1.ytreino <- IMF1.treino[,1]
# Starting Code -----------------------------------------------------
## Clear memory
rm(list=ls(all=TRUE))
## Load data
load("dataset.RData")
dataset.ts <- ts(dataset$values,
start = c(1998,6),
end = c(2019,8),
frequency = 12)
dataset.ts
dataset.decomp <- stl(dataset.ts, "per")
plot(dataset.decomp)
IMF1 <- data.frame(dataset.decomp$time.series[,1])
colnames(IMF1) <- "seasonal"
IMF2 <- data.frame(dataset.decomp$time.series[,2])
colnames(IMF2) <- "trend"
IMF3 <- data.frame(dataset.decomp$time.series[,3])
colnames(IMF3) <- "remainder"
## ACF and PACF plots to determine lag
acf(dataset$values, main = "")
pacf(dataset$values, main = "")
auto.arima(dataset$values)
lag <- 4
IMF1.x4 <- IMF1[(lag-3):(dim(IMF1)[1]-lag),1]
IMF1.x3 <- IMF1[(lag-2):(dim(IMF1)[1]-lag+1),1]
IMF1.x2 <- IMF1[(lag-1):(dim(IMF1)[1]-lag+2),1]
IMF1.x1 <- IMF1[(lag):(dim(IMF1)[1]-lag+3),1]
IMF1.y  <- IMF1[(lag+1):(dim(IMF1)[1]),1]
IMF1.lag <- cbind(IMF1.y,IMF1.x1,IMF1.x2,IMF1.x3,IMF1.x4)
colnames(IMF1.lag) <- c("y","x1","x2","x3","x4")
IMF2.x4 <- IMF2[(lag-3):(dim(IMF2)[1]-lag),1]
IMF2.x3 <- IMF2[(lag-2):(dim(IMF2)[1]-lag+1),1]
IMF2.x2 <- IMF2[(lag-1):(dim(IMF2)[1]-lag+2),1]
IMF2.x1 <- IMF2[(lag):(dim(IMF2)[1]-lag+3),1]
IMF2.y  <- IMF2[(lag+1):(dim(IMF2)[1]),1]
IMF2.lag <- cbind(IMF2.y,IMF2.x1,IMF2.x2,IMF2.x3,IMF2.x4)
colnames(IMF2.lag) <- c("y","x1","x2","x3","x4")
IMF3.x4 <- IMF3[(lag-3):(dim(IMF3)[1]-lag),1]
IMF3.x3 <- IMF3[(lag-2):(dim(IMF3)[1]-lag+1),1]
IMF3.x2 <- IMF3[(lag-1):(dim(IMF3)[1]-lag+2),1]
IMF3.x1 <- IMF3[(lag):(dim(IMF3)[1]-lag+3),1]
IMF3.y  <- IMF3[(lag+1):(dim(IMF3)[1]),1]
IMF3.lag <- cbind(IMF3.y,IMF3.x1,IMF3.x2,IMF3.x3,IMF3.x4)
colnames(IMF3.lag) <- c("y","x1","x2","x3","x4")
## Training and Test sets
n <- dim(IMF1.lag)[1]
cut <- 0.7 * n
# IMF1
IMF1.train <- IMF1.lag[1:cut,]
IMF1.test <- tail(IMF1.lag,n-cut)
IMF1.xtrain <- IMF1.train[,-1]
IMF1.ytrain <- IMF1.train[,1]
IMF1.xtest <- IMF1.test[,-1]
IMF1.ytest <- IMF1.test[,1]
# IMF2
IMF2.train <- IMF2.lag[1:cut,]
IMF2.test <- tail(IMF2.lag,n-cut)
IMF2.xtrain <- IMF2.train[,-1]
IMF2.ytrain <- IMF2.train[,1]
IMF2.xtest <- IMF2.test[,-1]
IMF2.ytest <- IMF2.test[,1]
# IMF3
IMF3.train <- IMF3.lag[1:cut,]
IMF3.test <- tail(IMF3.lag,n-cut)
IMF3.xtrain <- IMF3.train[,-1]
IMF3.ytrain <- IMF3.train[,1]
IMF3.xtest <- IMF3.test[,-1]
IMF3.ytest <- IMF3.test[,1]
train <- list(IMF1.train,IMF2.train,IMF3.train)
test  <- list(IMF1.test,IMF2.test,IMF3.test)
save.image("fire-datalag.RData")
train
dim(train)
dim(train[[1]])
dim(test[[1]])
dim(test[[1]])+dim(train[[1]])
# Training and Predictions ------------------------------------------
# load("fire-datalag.RData")
set.seed(1234)
model.list <- c("knn", "svmLinear2", "rf", "xgbLinear", "mlp",
"earth", "gbm", "extraTrees", "treebag", "brnn")
control <- trainControl(method = "timeslice",
initialWindow = 0.7*dim(train[[1]])[1],
horizon = 1,
fixedWindow = FALSE,
allowParallel = TRUE,
savePredictions = 'final')
model.list[1]
model.list[2]
dim(model.list)
length(model.list)
count <- c(1:length(model.list))
combpred <- expand.grid(count,count,count)
count
combpred
dim(combpred)
head(combpred)
model.list <- c("knn", "svmLinear2", "rf", "xgbLinear", "mlp",
"earth", "gbm", "extraTrees", "treebag", "brnn")
length(model.list)
# Training and Predictions ------------------------------------------
# load("fire-datalag.RData")
set.seed(1234)
control <- trainControl(method = "timeslice",
initialWindow = 0.7*dim(train[[1]])[1],
horizon = 1,
fixedWindow = FALSE,
allowParallel = TRUE,
savePredictions = 'final')
model.list <- c("knn", "svmLinear2", "rf", "xgbLinear", "mlp",
"earth", "gbm", "extraTrees", "treebag", "brnn")
IMF1.model <- list()
IMF2.model <- list()
IMF3.model <- list()
pred.IMF1.train <- NA
pred.IMF1.test  <- NA
pred.IMF1       <- NA
pred.IMF2.train <- NA
pred.IMF2.test  <- NA
pred.IMF2       <- NA
pred.IMF3.train <- NA
pred.IMF3.test  <- NA
pred.IMF3       <- NA
# Cria barra de progresso
pb <- txtProgressBar(title = "progress bar", min = 0,
max = length(model.list), width = 30, style = 3)
for (i in 1:length(model.list)) {
IMF1.model[[i]] <- train(y~., data = train[[1]],
method = model.list[i],
trControl = control,
preProcess = c("center","scale"),
tuneLength = 4)
IMF2.model[[i]] <- train(y~.,data = train[[2]],
method = model.list[i],
trControl = control,
preProcess = c("center","scale"),
tuneLength = 4)
IMF3.model[[i]] <- train(y~.,data = train[[3]],
method = model.list[i],
trControl = control,
preProcess = c("center","scale"),
tuneLength = 4)
# Predição
pred.IMF1.train <- predict(IMF1.model[[i]],train[[1]])
pred.IMF1.test  <- predict(IMF1.model[[i]],test[[1]])
pred.IMF1[i]     <- data.frame(c(pred.IMF1.train,pred.IMF1.test))
pred.IMF2.train <- predict(IMF2.model[[i]],train[[2]])
pred.IMF2.test  <- predict(IMF2.model[[i]],test[[2]])
pred.IMF2[i]     <- data.frame(c(pred.IMF2.train,pred.IMF2.test))
pred.IMF3.train <- predict(IMF3.model[[i]],train[[3]])
pred.IMF3.test  <- predict(IMF3.model[[i]],test[[3]])
pred.IMF3[i]     <- data.frame(c(pred.IMF3.train,pred.IMF3.test))
# Atualiza barra de progresso
Sys.sleep(0.1)
setTxtProgressBar(pb, i, title=paste( round(i/length(model.list)*100, 0),
"% done"))
}
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
load("C:/Users/ramon/Dropbox/PUCPR/Doutorado/Material/Scripts/Paper CBIC 2019/original.RData")
## Set working directory
setwd("~/Doc/Wind")
load("original.RData")
